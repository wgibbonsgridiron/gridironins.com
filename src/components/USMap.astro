---
import { geoAlbersUsa, geoPath } from 'd3-geo';
import { feature, mesh } from "topojson-client";
import states10m from "us-atlas/states-10m.json";

export interface Props {
  /** 2-letter USPS codes to highlight, e.g. ["FL","TX","CA"] */
  highlighted?: string[];
  /** Alias for highlighted (backwards compatibility) */
  highlightedStates?: string[];
  /** Whether to show state labels */
  showLabels?: boolean;
  /** Extra class on <svg> (useful for width/height via Tailwind) */
  class?: string;
  /** Optional aria-label override */
  ariaLabel?: string;
}

const {
  highlighted: highlightedProp = [],
  highlightedStates = [],
  showLabels = true,
  class: className = "w-full h-auto",
  ariaLabel = "United States map with highlighted states",
} = Astro.props as Props;

const highlighted = highlightedProp.length > 0 ? highlightedProp : highlightedStates;

const viewBoxWidth = 975;
const viewBoxHeight = 610;

const FIPS_TO_USPS: Record<string, { code: string; name: string }> = {
  "01": { code: "AL", name: "Alabama" },
  "02": { code: "AK", name: "Alaska" },
  "04": { code: "AZ", name: "Arizona" },
  "05": { code: "AR", name: "Arkansas" },
  "06": { code: "CA", name: "California" },
  "08": { code: "CO", name: "Colorado" },
  "09": { code: "CT", name: "Connecticut" },
  "10": { code: "DE", name: "Delaware" },
  "11": { code: "DC", name: "District of Columbia" },
  "12": { code: "FL", name: "Florida" },
  "13": { code: "GA", name: "Georgia" },
  "15": { code: "HI", name: "Hawaii" },
  "16": { code: "ID", name: "Idaho" },
  "17": { code: "IL", name: "Illinois" },
  "18": { code: "IN", name: "Indiana" },
  "19": { code: "IA", name: "Iowa" },
  "20": { code: "KS", name: "Kansas" },
  "21": { code: "KY", name: "Kentucky" },
  "22": { code: "LA", name: "Louisiana" },
  "23": { code: "ME", name: "Maine" },
  "24": { code: "MD", name: "Maryland" },
  "25": { code: "MA", name: "Massachusetts" },
  "26": { code: "MI", name: "Michigan" },
  "27": { code: "MN", name: "Minnesota" },
  "28": { code: "MS", name: "Mississippi" },
  "29": { code: "MO", name: "Missouri" },
  "30": { code: "MT", name: "Montana" },
  "31": { code: "NE", name: "Nebraska" },
  "32": { code: "NV", name: "Nevada" },
  "33": { code: "NH", name: "New Hampshire" },
  "34": { code: "NJ", name: "New Jersey" },
  "35": { code: "NM", name: "New Mexico" },
  "36": { code: "NY", name: "New York" },
  "37": { code: "NC", name: "North Carolina" },
  "38": { code: "ND", name: "North Dakota" },
  "39": { code: "OH", name: "Ohio" },
  "40": { code: "OK", name: "Oklahoma" },
  "41": { code: "OR", name: "Oregon" },
  "42": { code: "PA", name: "Pennsylvania" },
  "44": { code: "RI", name: "Rhode Island" },
  "45": { code: "SC", name: "South Carolina" },
  "46": { code: "SD", name: "South Dakota" },
  "47": { code: "TN", name: "Tennessee" },
  "48": { code: "TX", name: "Texas" },
  "49": { code: "UT", name: "Utah" },
  "50": { code: "VT", name: "Vermont" },
  "51": { code: "VA", name: "Virginia" },
  "53": { code: "WA", name: "Washington" },
  "54": { code: "WV", name: "West Virginia" },
  "55": { code: "WI", name: "Wisconsin" },
  "56": { code: "WY", name: "Wyoming" },
};

const highlightSet = new Set((highlighted || []).map(c => c.toUpperCase().trim()));

const projection = geoAlbersUsa().translate([viewBoxWidth / 2, viewBoxHeight / 2]).scale(1280);
const path = geoPath(projection);

const statesGeo = feature(states10m as any, (states10m as any).objects.states) as any;

type DrawnState = {
  fips: string;
  code: string;
  name: string;
  d: string;
  cx: number;
  cy: number;
  isHighlighted: boolean;
};

const drawnStates: DrawnState[] = statesGeo.features
  .map((feat: any) => {
    const id: string = (feat.id ?? "").toString().padStart(2, "0");
    const meta = FIPS_TO_USPS[id];
    if (!meta) return null;

    const d = path(feat) ?? "";
    const [cx, cy] = path.centroid(feat);

    return {
      fips: id,
      code: meta.code,
      name: meta.name,
      d,
      cx,
      cy,
      isHighlighted: highlightSet.has(meta.code),
    };
  })
  .filter(Boolean);
---

<svg
  xmlns="http://www.w3.org/2000/svg"
  viewBox={`0 0 ${viewBoxWidth} ${viewBoxHeight}`}
  role="img"
  aria-label={ariaLabel}
  class={`w-full h-auto ${className}`}
>
  <title>{ariaLabel}</title>

  <defs>
    <filter id="highlighted-shadow">
      <feDropShadow dx="0" dy="2" stdDeviation="3" flood-opacity="0.3"/>
    </filter>
  </defs>

  <g id="states">
    {drawnStates.map((s, idx) => (
      <path
        d={s.d}
        class:list={[
          'transition-all duration-300 ease-out cursor-pointer',
          s.isHighlighted
            ? 'fill-brand-500 hover:fill-brand-600 dark:fill-brand-600 dark:hover:fill-brand-500'
            : 'fill-gray-200 dark:fill-slate-700 hover:fill-gray-300 dark:hover:fill-slate-600',
          'hover:brightness-110'
        ]}
        stroke="currentColor"
        stroke-width="0.7"
        vector-effect="non-scaling-stroke"
        class="text-slate-400 dark:text-slate-600"
        filter={s.isHighlighted ? "url(#highlighted-shadow)" : undefined}
        tabindex={idx === 0 ? "0" : undefined}
        aria-label={`${s.name}, ${s.isHighlighted ? 'coverage available' : 'no coverage'}`}
      >
        <title>{s.name} ({s.code}){s.isHighlighted ? ' - Coverage Available' : ''}</title>
      </path>
    ))}
  </g>

  {showLabels && (
    <g
      id="labels"
      font-family="sans-serif"
      font-size="12"
      font-weight="600"
      class="fill-slate-900 dark:fill-slate-100 pointer-events-none select-none"
    >
      {drawnStates.map(s => (
        <text
          x={s.cx}
          y={s.cy}
          text-anchor="middle"
          dominant-baseline="central"
          stroke="white"
          stroke-width="3"
          stroke-linecap="round"
          stroke-linejoin="round"
          paint-order="stroke"
          class="dark:stroke-slate-900"
        >
          {s.code}
        </text>
      ))}
    </g>
  )}
</svg>

<style>
  /* Enhanced focus styles for accessibility */
  path:focus-visible {
    outline: 3px solid #2965b0;
    outline-offset: 2px;
  }

  /* Subtle animation on load */
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  svg {
    animation: fadeIn 0.5s ease-in;
  }

  /* Improve text rendering */
  text {
    text-rendering: geometricPrecision;
  }

  /* Responsive font sizing */
  @media (max-width: 640px) {
    g#labels {
      font-size: 10px;
    }
  }

  @media (min-width: 1024px) {
    g#labels {
      font-size: 13px;
    }
  }
</style>
