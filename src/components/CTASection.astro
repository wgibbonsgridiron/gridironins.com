---
interface Button {
  text: string;
  href: string;
  variant?: 'primary' | 'secondary';
}

interface Props {
  title: string;
  description?: string;
  buttons?: Button[];
  class?: string;
}

const {
  title,
  description,
  buttons = [],
  class: className = ''
} = Astro.props;
---

<section class={`max-w-7xl mx-auto px-4 py-16 ${className}`}>
  <div class="rounded-2xl bg-gradient-to-br from-brand-600 to-brand-900 dark:from-brand-700 dark:to-brand-950 p-8 md:p-12 text-center relative overflow-hidden">
    <div class="absolute inset-0 bg-[radial-gradient(circle_at_70%_50%,rgba(255,255,255,0.1),transparent)]"></div>
    <div class="relative z-10">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">{title}</h2>
      {description && (
        <p class="text-lg text-brand-50 max-w-2xl mx-auto mb-8">
          {description}
        </p>
      )}
      {buttons.length > 0 && (
        <div class="flex flex-wrap gap-4 justify-center">
          {buttons.map((button) => (
            <a
              href={button.href}
              class={
                button.variant === 'secondary'
                  ? 'inline-flex items-center px-6 py-3 rounded-lg border-2 border-white text-white hover:bg-white/10 font-semibold transition-all'
                  : 'inline-flex items-center px-6 py-3 rounded-lg bg-white text-brand-600 hover:bg-brand-50 font-semibold shadow-lg transition-all'
              }
            >
              {button.text}
            </a>
          ))}
        </div>
      )}
      <slot />
    </div>
  </div>
</section>
